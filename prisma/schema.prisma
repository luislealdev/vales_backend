datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// USER
model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  role      Role    @default(CLIENT)
  is_active Boolean @default(true)

  distributed_coupons Coupon[]      @relation("DistributorCoupons")
  received_coupons    Coupon[]      @relation("ClientCoupons")
  learn_posts         LearnPost[]
  news_posts          NewsPost[]
  post_comments       PostComment[]
  post_likes          PostLike[]

  user_info UserInfo?
  address   Address?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  created_by String?

  payments            Payment[] @relation("Payments")
  registered_payments Payment[] @relation("RegisteredPayments")
}

model UserInfo {
  id               String   @id @default(uuid())
  name             String
  second_name      String
  first_last_name  String
  second_last_name String
  phone            String
  birthdate        DateTime
  score            Int      @default(0)
  rfc              String
  curp             String
  gender           Gender

  user_id    String   @unique
  user       User     @relation(fields: [user_id], references: [id])
  address    Address? @relation(fields: [address_id], references: [id])
  address_id String?
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String
  phone       String
  email       String?
  image       String
  status      Status    @default(ACTIVE)
  addresses   Address[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Address {
  id           String @id @default(uuid())
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  zip_code     String

  user_id   String?    @unique
  user      User?      @relation(fields: [user_id], references: [id])
  user_info UserInfo[]

  store_id String?
  store    Store?  @relation(fields: [store_id], references: [id])
}

// COUPON
model Coupon {
  id String @id @default(uuid())

  code        String    @unique
  amount      Float
  used_amount Float     @default(0)
  is_redeemed Boolean   @default(false)
  redeemed_at DateTime?

  created_at    DateTime @default(now())
  // duration      Int
  expires_at    DateTime
  months_to_pay Int

  // coupon_type_id String
  // coupon_type    CouponType @relation(fields: [coupon_type_id], references: [id])

  distributor_id String
  distributor    User   @relation("DistributorCoupons", fields: [distributor_id], references: [id])

  client_id String
  client    User      @relation("ClientCoupons", fields: [client_id], references: [id])
  Payment   Payment[]
}

// model CouponType {
//   id      String   @id @default(uuid())
//   type    String
//   coupons Coupon[]
// }

model Payment {
  id String @id @default(uuid())

  amount           Float
  description      String
  paid_at          DateTime
  last_date_to_pay DateTime

  user_id String
  user    User   @relation("Payments", fields: [user_id], references: [id])

  coupon_id String
  coupon    Coupon @relation(fields: [coupon_id], references: [id])

  registered_by String
  registeredBy  User   @relation("RegisteredPayments", fields: [registered_by], references: [id])
}

model LearnPost {
  id String @id @default(uuid())

  title       String
  description String
  video_url   String
  created_at  DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])
}

// News
model NewsPost {
  id String @id @default(uuid())

  title      String
  content    String
  image      String
  created_at DateTime @default(now())
  likes      Int      @default(0)

  user_id       String
  user          User          @relation(fields: [user_id], references: [id])
  post_comments PostComment[]
  post_likes    PostLike[]
}

model PostComment {
  id String @id @default(uuid())

  content    String
  created_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  news_post_id String
  newsPost     NewsPost @relation(fields: [news_post_id], references: [id])
}

model PostLike {
  id String @id @default(uuid())

  liked_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  news_post_id String
  newsPost     NewsPost @relation(fields: [news_post_id], references: [id])
}

enum Role {
  CLIENT
  DISTRIBUTOR
  STORE
  EDITOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
}
